/******** DO NOT EDIT THIS FILE ********/
#ifndef _IPC_H
#define _IPC_H
#include <stdlib.h>
#include "proc.h"
#include "shobject_name.h"

/* 
 * Definition of struct ipc to facilitate inter-process 
 * communication (IPC). The struct encapsulates information necessary for 
 * access to and management of shared memory objects that can be used by
 * multiple process.
 * The ipc struct has a process descriptor with meta-information about a 
 * process that has a reference to the ipc, plus the name and 
 * address in the process' address space of the the shared memory object. 
 *
 * Type alias:
 * A struct ipc can also be referred to as ipc_t
 *
 * Fields:
 * proc - the process descriptor of a process using this ipc.
 * name - the name of the shared memory object
 * addr - the address in the process address space that the shared memory
 *      object is mapped to
 *
 * See also:
 * ipc_new and ipc_delete - for information on creation and destruction of ipc
 *      objects
 * proc.h - for information about the process descriptor type (proc_t).
 * shobject_name.h - for specification of the maximum shared object name: 
 *      MAX_SHOBJ_NAME_SIZE
 */
typedef struct ipc {
    proc_t* proc;
    char name[MAX_SHOBJ_NAME_SIZE];
    void* addr;
} ipc_t;

/*
 * ipc_new(proc_t* proc, const char* label, size_t size)
 * 
 * Creates a new (dynamically allocated) ipc struct. If the process 
 * creating the ipc struct is the init process (as indicated by the
 * is_init field of the proc parameter), ipc_new creates a shared memory object
 * with a name derived from the application-specific label and with the 
 * specified size and the shared memory is zeroed. That is, on initialisation
 * all bytes in the shared memory are 0. For all processes, the named 
 * shared memory is mapped to an address in the calling process' address space.
 *
 * Usage:
 *      proc_t* proc = proc_new(...);   // or create from cmd line using 
 *                                      // proc_init
 *      ipc_t* ipc = ipc_new(proc, "shared_int_label", sizeof(int));
 *                      // creates new shared object the size of an int
 *                      // or maps to an existing object the size of an int
 *      int* i = (int*) ipc->addr;  // access the shared int
 *      *i += 1;                    // increment the shared int
 *      ...                         
 *      ...
 *      ipc_delelet(ipc);   // delete this instance of the ipc struct
 *                          // unmapping from memory etc.
 *
 * Parameters:
 * proc - the non-null descriptor of a process that will access the 
 *      shared object
 * label - the  application specific label for the shared object. If label is 
 *      the null or empty string, the label "none" is use
        (see shobject_name.h)
 * size - the non-zero size of the shared object (memory allocated for sharing)
 *
 * Return:
 * On success: a new non-null pointer to a dynamically allocated ipc struct.
 *      Use ipc_delete to free memory allocated to the ipc struct and to 
 *      release OS resources associated with the underlying shared memory
 *      object.
 * On failure: NULL, and errno is set as specified in Errors.
 *
 * Errors:
 * If the call fails, the NULL pointer will be returned and errno will be 
 * set as follows:
 *      EINVAL - invalid argument if proc is NULL or size is 0
 *      Other values as specified by the system library functions used to
 *      implement the function (see below)
 * 
 * See also:
 * proc.h - for a description of the proc type
 * shobject_name.h - for information on how shared memory object names are 
 *      generated.
 * man pages for close, ftruncate, free, malloc, memset, mmap, shm_open and
 *      shm_unlink system library functions used to implement this function.
 */
ipc_t* ipc_new(proc_t* proc, const char* label, size_t size);

/*
 * ipc_delete(ipc_t* ipc);
 * 
 * Delete an ipc struct dynamically allocated by ipc_new. This function 
 * dynamic memory and other OS resources for the ipc struct and 
 * underlying shared object allocated by ipc_new. 
 *
 * If ipc is NULL this function has no effect.
 *
 * Usage: see ipc_new
 *
 * Parameters:
 * ipc - a pointer to an ipc struct allocated by ipc_new. 
 *
 */
void ipc_delete(ipc_t* ipc);

#endif