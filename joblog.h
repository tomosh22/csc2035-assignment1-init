/******** DO NOT EDIT THIS FILE ********/
#ifndef _JOBLOG_H
#define _JOBLOG_H
#include "job.h"
#include "proc.h"

/*
 * jlog_init(proc_t* proc)
 *
 * Initialise a joblog for the given process to write jobs to.
 * Log initialisation does the following:
 * 1. if proc is the init process (its is_init field is true), create the 
 *    parent directory (./out) for logs it it does not already exist. 
 * 2. delete any existing log for the given process
 *
 * Usage:
 *      proc_t* proc = proc_setup(...); 
 *      ...
 *      ...
 *      if (jlog_init(proc) == -1) {
 *          // delete proc and exit with error
 *      }
 * 
 * See bwait_consumer.c for how the log is initialised as part of set up of 
 * of IPC simulation applications.
 *
 * Parameters:
 * proc - the non-null descriptor of a process that will log jobs
 *
 * Return:
 * On success: 0
 * On failure: -1, and errno is set as specified in Errors.
 *
 * Errors:
 * If the call fails, -1 will be returned and errno will be set as follows:
 *      EINVAL - invalid argument if proc is NULL
 *      Other values as specified by the system library functions used to
 *      implement the function (see below)
 *
 * See also:
 * proc.h - for a description of the proc type
 * man pages for mkdir, unlink and stat
 */
int jlog_init(proc_t* proc);

/*
 * jlog_write_entry(proc_t* proc, job_t* job)
 *
 * Write an entry for the given job to the given process' log. 
 * Each log entry is on a single line in the log text file. The entry is
 * of the following form:
 *      <job_id>p<proc_id>
 *
 * where <job_id> is replaced by a 5 digit job id and <proc_id> is replaced 
 * by a 2 digit id of the process that created the job, not necessarily the
 * calling process (i.e. the pid field of the job). Ids are padded with 
 * leading 0s if they are less than the specified number of digits. 
 * For example, for a job with id 10 and pid 5, the log entry written to the 
 * the calling process' log file will be:
 *      00010p05
 * followed by a new line character.
 * This ensures that each entry in the log file is exactly 9 characters long
 * including the new line.
 * Entries are appended to the log file. That is, the oldest log entry is 
 * at line 1, the next oldest at line 2 etc.
 *
 * See README_joblog_example.txt for an example joblog file.
 *
 * Usage:
 *      jlog_write_entry(proc, job);
 * 
 * See bwait_consumer.c (and other IPC simulation applications) for how the
 * jlog_write_entry function is used to write log entries.
 *
 * Parameters:
 * proc - the non-null descriptor of a process that will log jobs
 * job - the non-null pointer to a job descriptor
 *
 * Return:
 * jlog_write_entry() does not return any value. See the Notes section.
 *
 * Errors:
 * jlog_write_entry() returns without reporting errors. Therefore, errno 
 * should be 0 after calling this function. See the Notes section.
 *
 * Notes:
 * If jlog_write_entry() fails, the log entry is not written to the 
 * log file and the file will remain unchanged. In the case of most errors,
 * errno will be 0 after calling the function. The function guarantees the 
 * following: 
 * 1. If either proc or job is NULL, the function returns without attempting
 *      to write to the log file.
 * 2. If a file name cannot be generated from the given process descriptor,
 *      the function returns without attempting to write to the log file.
 * 3. If the log file cannot be opened, the function returns without
 *      attempting to write to file.
 * 4. If a write to file is attempted but fails, many errors are suppressed
 *      and the function returns. However, it is possible that some errors
 *      may cause program termination.
 *
 * See also:
 * job.h - for a description of the job type
 * proc.h - for a description of the proc type
 */
void jlog_write_entry(proc_t* proc, job_t* job);

/*
 * jlog_read_entry(proc_t* proc, int entry_num)
 *
 * Read the specified entry from the given process' log. The entry_num 
 * specifies the log entry to read. If there are N entries in the log file, 
 * a valid entry_num will be in range 0 to N - 1. The first (or oldest)
 * entry in the log has entry_num of 0.
 * If there is an entry for the given entry_num, a new dynamically 
 * allocated string of the following form is returned: 
 *      <job_id>p<proc_id>
 * The returned string does not include an end of line character. See
 * jlog_write_entry for more information on the log entry format.
 *
 * Usage:
 *      // one method to read a log and print each entry in turn is:
 *      int i = 0;
 *      char* entry = NULL;
 *   
 *      while ((entry = jlog_read_entry(proc, i))) {
 *          printf("%s\n", entry);
 *          free(entry);
 *          i++;
 *      }
 *
 * Parameters:
 * proc - the non-null descriptor of the process whose log to read
 * entry_num - the non-negative number of the entry in the log to read
 *
 * Return:
 * On success: a new, dynamically allocated string that is the entry in the 
 *      given process' log specified by the given entry_num. It is the 
 *      responsibility of the user of this function to free the memory
 *      allocated by the function - see Usage.
 * On failure: NULL, and failures are handled as specified in the Notes 
 *      section
 *
 * Errors:
 * jlog_read_entry() returns without NULL for most errors, and in most cases
 * errno will be 0 after calling this function. See the Notes section.
 * should be 0 after calling this function. See the Notes section.
 * jlog_read_entry() does not attempt to read the log and returns NULL and 
 * does NOT set the errno for following errors:
 * 1. proc is NULL
 * 2. entry_num is < 0
 * 3. a filename cannot be generated from the given 
 *
 * Notes:
 * If jlog_read_entry() fails, in the following cases there will be no 
 * attempt to read the log, NULL will be returned and errno will most likely
 * be 0:
 * 1. The proc parameter is NULL
 * 2. entry_num is < 0
 * 3. A file name cannot be generated from the given process descriptor.
 * 4. The log file cannot be opened.
 * 
 * If the above errors do not occur, jlog_read_entry() attempts to read 
 * the entry specified by the given entry_num. 
 * If there is no entry in the log file for the given entry_num (e.g. 
 * entry_num is beyond the end of the file), then NULL will be returned 
 * and errno will be 0. 
 * Other file processing errors may occur during attempts to read which 
 * are in effect ignored and the errno is set to 0 or, in some circumstances,
 * an error may cause program termination.
 *
 * See also:
 * proc.h - for a description of the proc type
 */
char* jlog_read_entry(proc_t* proc, int entry_num);

/*
 * jlog_delete(proc_t* proc)
 *
 * Delete the given process' log.
 *
 * Usage:
 *      jlog_delete(proc);
 *  
 * Parameters:
 * proc - the non-null descriptor of the process whose log to delete
 *
 * Return:
 * jlog_delete() does not return any value. See the Notes section.
 *
 * Errors:
 * jlog_delete() returns without reporting errors. Therefore, errno 
 * should be 0 after calling this function. See the Notes section.
 *
 * Notes:
 * If jlog_write_entry() fails, in almost all cases this function will have 
 * effect. In the case of most errors, errno will be 0 after calling the
 * function. The function guarantees the  following: 
 * 1. If proc is NULL, the function returns without attempting to delete 
 *      the log file.
 * 2. If a file name cannot be generated from the given process descriptor,
 *      the function returns without attempting to delete the log file.
 *
 * The function does not attempt to recover from or detect an error 
 * when deleting the log file. Therefore, it is possible that there 
 * can be some unspecified error, deletion fails and the log file still
 * exists after calling this function. The errno will be set to 0 in these
 * cases.
 *
 * See also:
 * proc.h - for a description of the proc type
 */
void jlog_delete(proc_t* proc);

#endif
